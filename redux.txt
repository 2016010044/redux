https://www.jianshu.com/p/f1a825176894
json.parse和json.stringify的区别：
一：JSON.parse()【从一个字符串中解析出json对象】

例子：

//定义一个字符串

var data='{"name":"goatling"}'

//解析对象​

​JSON.parse(data)

结果是：

​name:"goatling"

二：JSON.stringify()【从一个对象中解析出字符串】

var data={name:'goatling'}

JSON.stringify(data)

结果是：

'{"name":"goatling"}'
redux 是 js 应用的可预测状态的容器。 可以理解为全局数据状态管理工具，用来做组件通信。
一、安装redux：

npm install redux --save
# 或
yarn add redux
二、readux文件目录结构的构建（在项目src文件目录下 —> 创建store文件夹）
1、创建store/index.js文件
store就是整个项目保存数据的地方，并且只能有一个。创建store就是把所有reducer给它。
import {createStore} from 'redux'
import reducers from './reducers'

const store = createStore(reducers);

export default  store;
2、创建store/reducer.js文件(仓库)：
reducer就是根据action来对state进行操作，redux中的state是不能直接修改的，只能通过action来修改，相当于我们在单例中定义setter方法。
import {
    GET_ALL_TODO,
    DEL_ONE_TODO,
    CHANGE_ONE_TODO,
    ADD_ONE_TODO,
    DEL_FINISHED_TODO,
    IS_CHECKED_ALL_TODO
} from './actionTypes'

// 默认状态(保险柜)
const defaultState = {
  todos: [],
  finishedCount: 0
};

export default (state = defaultState, action )=>{//这个action就是客户给客户经理的钱，reducers就是存钱的部门
    // 1. 存所有的Todo
    if(action.type === GET_ALL_TODO){
        const newState = JSON.parse(JSON.stringify(state));
        newState.todos = action.todos;
        return newState;
    }
    // 2. 删除一条todo
    if(action.type === DEL_ONE_TODO){
        const newState = JSON.parse(JSON.stringify(state));
        // 2.1. 遍历
        let tempFinishedCount = 0;
        newState.todos.forEach((todo, index)=>{
            if(action.todoId === todo.id){
                newState.todos.splice(index, 1);
            }
        });
        // 2.2 处理选中的
        newState.todos.forEach((todo, index)=>{
            if(todo.finished){
                tempFinishedCount += 1;
            }
        });
        // 2.3 更新状态
       newState.finishedCount = tempFinishedCount;
        return newState;
    }
    // 3. 修改一条todo的完成状态
    if(action.type === CHANGE_ONE_TODO){
        // 3.1 业务
        const newState = JSON.parse(JSON.stringify(state));
        let tempFinishedCount = 0;
        newState.todos.forEach((todo, index)=>{
            if(action.todoId === todo.id){
                todo.finished = action.isFinished;
            }
            if(todo.finished){
                tempFinishedCount += 1;
            }
        });

        // 3.2 更新状态
        newState.finishedCount = tempFinishedCount;
        return newState;
    }
    // 4.  添加一条todo
    if(action.type === ADD_ONE_TODO){
        // 4.1 业务
        const newState = JSON.parse(JSON.stringify(state));
        newState.todos.push(action.todo);
        // 4.2 更新状态
        return newState;
    }
    // 5. 删除已经完成状态的todo
    if(action.type === DEL_FINISHED_TODO){
        // 5.1 业务
        const newState = JSON.parse(JSON.stringify(state));
        let tempArr = [];
        newState.todos.forEach((todo, index)=>{
            if(!todo.finished){ // 没有完成的任务
                tempArr.push(todo);
            }
        });
        // 5.2 更新状态
        newState.todos = tempArr;
        newState.finishedCount = 0;
        return newState;
    }
    // 6. todo的全选与取消全选
    if(action.type === IS_CHECKED_ALL_TODO){
        // 6.1 业务
        const newState = JSON.parse(JSON.stringify(state));
        let tempFinishedCount = 0;
        newState.todos.forEach((todo, index)=>{
            todo.finished = action.flag;
        });

        // 处理选中的
        newState.todos.forEach((todo, index)=>{
            if(todo.finished){
                tempFinishedCount += 1;
            }
        });

        // 2. 更新状态机
        newState.finishedCount = tempFinishedCount;
        return newState;
    }
    return  state;
}

3、创建store/actionTypes.js文件（常量）：
// 1. 存所有的Todo
export const GET_ALL_TODO = 'get_all_todo';
// 2. 删除一条todo
export const DEL_ONE_TODO = 'del_one_todo';
// 3. 修改一条todo的完成状态
export const CHANGE_ONE_TODO = 'change_one_todo';
// 4.  添加一条todo
export const ADD_ONE_TODO = 'add_one_todo';
// 5. 删除已经完成状态的todo
export const DEL_FINISHED_TODO = 'del_finished_todo';
// 6. todo的全选与取消全选
export const IS_CHECKED_ALL_TODO = 'is_checked_all_todo';

4、创建store/actionCreators.js文件（事件）：
redux 将每一个更改动作描述为一个action，要更改state中的内容，你需要发送action。一个action是一个简单的对象，用来描述state发生了什么变更。
//这个js就相当于客户把钱给客户经理，客户经理要做的一些事
import {
    GET_ALL_TODO,
    DEL_ONE_TODO,
    CHANGE_ONE_TODO,
    ADD_ONE_TODO,
    DEL_FINISHED_TODO,
    IS_CHECKED_ALL_TODO
} from './actionTypes'

// 1. 存所有的Todo
export const getAllTodoAction = (todos)=>({
    type: GET_ALL_TODO,
    todos
});
// 2. 删除一条todo
export const getDelTodoAction = (todoId)=>({
    type: DEL_ONE_TODO,
    todoId
});
// 3. 修改一条todo的完成状态
export const getChangeOneTodo = (todoId, isFinished)=>({
    type: CHANGE_ONE_TODO,
    todoId,
    isFinished
});
// 4.  添加一条todo
export const getAddOneTodoAction = (todo)=>({
    type: ADD_ONE_TODO,
    todo
});
// 5. 删除已经完成状态的todo
export const getDelFinishedTodoAction = ()=>({
    type: DEL_FINISHED_TODO
});
// 6. todo的全选与取消全选
export const getIsCheckedAllAction = (flag)=>({
    type: IS_CHECKED_ALL_TODO,
    flag
});

5.使用：
import React, {Component} from 'react'

import store from './../store/index'
import {getAddOneTodoAction} from './../store/actionCretors'

export default class Top extends Component{
    constructor(props) {
        super(props);
        this.myInputRef = React.createRef();

        // 初始化state
        this.state = store.getState();
    }

    componentDidMount() {
        store.subscribe(this._handleStoreChange);
    }

    _handleStoreChange = ()=>{
         this.setState(store.getState())
    };

    _handleKeyEvent(e){
        // 0. 初始化数据
        const {todos} = this.state;
        const lastTodoId = todos.length === 0 ? 0 : todos[todos.length - 1].id;

        // 1. 判断是否是回车
        if(13 === e.keyCode){
            // 2. 判断输入的内容是否为空
            const value = this.myInputRef.current.value;
            if(!value.trim()){
                alert('输入的内容不能为空');
                return;
            }

            // 3. 创建一个TODO对象，并返回
            let todo = {id: lastTodoId + 1, title: value, finished: false};

            const action = getAddOneTodoAction(todo);
            store.dispatch(action);//分发给reducers

            // 4. 清除输入框中的内容
            this.myInputRef.current.value = '';
        }
    }

    render() {
        return (
            <div className="todo-header">
                <input
                    ref = {this.myInputRef}
                    type="text"
                    placeholder="请输入今天的任务清单，按回车键确认"
                    onKeyDown={(e)=>this._handleKeyEvent(e)}
                />
            </div>
        )
    }
}
这里就来详细介绍一下它的用法，先初始化store,在constructor中，： this.state = store.getState();
接着在componentDidMount中订阅，讲一下这里为什么要订阅，因为在每次dispatch修改数据的时候，其实只是数据发生了变化，如果不手动调用render，页面上的内容是不会变化的，但是每次dispatch后调用render很麻烦，就使用发布订阅模式，监听数据变化来自动渲染： componentDidMount() {
        store.subscribe(this._handleStoreChange);
    }

    _handleStoreChange = ()=>{
         this.setState(store.getState())
    };
接着在render中：
const action = getAddOneTodoAction(todo);
            store.dispatch(action);//分发给reducers
总结一下：
1.使用函数createStore创建store数据点
2.创建Reducer。它要改变的组件，它获取state和action，生成新的state
3.用subscribe监听每次修改情况
4dispatch执行，reducer(currentState,action)处理当前dispatch后的传入的action.type并返回给currentState处理后的state，通过currentListeners.forEach(v=>v())执行监听函数，并最后返回当前 action状态。

redux中间件：

1.redux-thunk:
1)它可以让原本只支持同步方式的redux扩展为支持异步的方式。
2）主要是将常规的对象类型的action扩展为可接受函数类型的action，在redux中dispatch中的参数action只能是对象，使用这个中间件就是使dispatch的参数action支持函数。使用如下：
index.js:
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk'
const store = createStore(themeReducer, applyMiddleware(thunk))
actionTypes.js不变，reducer不变。actionCretor.js：
// 1. 存所有的Todo
export const getAllTodoAction = ()=>{
    return ()=>{
        ajax('/api/todos').then((res)=>{
            console.log(res);
            if(res.status === 200){
                const todos = res.data;
                // 派发
                store.dispatch({
                    type: GET_ALL_TODO,
                    todos
                })
            }
        })
    }
};
这里的ajax是之前封装的，接口是自己搭建服务器写的，接口内容：
router.get('/api/todos', function(req, res, next) {
   res.json({
     status: 200,
     data: [
       {id: 1, title: "学习2个小时的react课程", finished: false},
       {id: 2, title: "学习1个小时的webpack课程", finished: false},
       {id: 3, title: "学习1个小时的node课程", finished: false},
       {id: 4, title: "刷2小时的抖音", finished: false}
     ]
   })
});
按道理这儿dispatch了，页面就不用再dispatch了。根据具体情况而定。

2.redux-saga:它和redux-thunk功能一样。
index.js:
import {createStore, applyMiddleware} from 'redux'
import reducers from './reducers'
import createSagaMiddleware from 'redux-saga'
import mySages from './sagas'
const sagaMiddleware = createSagaMiddleware(mySages);
const store =  createStore(reducers, applyMiddleware(sagaMiddleware ))
// 注意: 一定要放在最后
sagaMiddleware.run(mySages);

这个redux-saga其实就是在action和reducer之间夹的一层：
actionCretor:
export const getAllTodoAction = ()=>({
    type: REQ_ALL_TODO
});
actionTypes:
export const REQ_ALL_TODO = 'req_all_todo'; // 告知saga做什么事情
sagas:
import {put, takeEvery} from 'redux-saga/effects'
import ajax from './../http/index'
import {GET_ALL_TODO, REQ_ALL_TODO} from "./actionTypes";
function* getAllTodo() {
    const result = yield ajax('/api/todos');
    console.log(result);
    if(result.status === 200){
        const todos = result.data;
        // 派发给reducers
        yield put({
            type: GET_ALL_TODO,
            todos
        })
    }
}
function* mySaga() {
    // 接受action传递的任务
    yield takeEvery(REQ_ALL_TODO, getAllTodo);
}
export default mySaga;

reducer不变。

3.react-redux:
把store直接集成到React应用的顶层props里面，各个子组件都能访问到顶层props,例如：
ReactDOM.render(
  <React.StrictMode>
        <Provider store={store} >
            <App />
        </Provider>
  </React.StrictMode>,
  document.getElementById('root')
);
1）一般我们都将顶层组件包裹在Provider组件之中，这样的话，所有组件就都可以在react-redux的控制之下了，但是store必须作为参数放到Provider组件中去。
2）这个组件的作用：这个组件的目的是让所有组件都能够访问到Redux中的数据。
在使用这个组件的同时还有一个组件要使用。
connect：有两个参数，用于各个组件页面中。
const mapStateToProps = (state)=>{
    return {
        todos: state.todos
    }
};

const mapDispatchToProps = (dispatch)=>{
    return {
        addOneTodo(todo){
            const action = getAddOneTodoAction(todo);
            dispatch(action);
        }
    }
};

// export default Top;
export  default connect(mapStateToProps, mapDispatchToProps)(Top)
mapStateToProps：把state映射到props中去 ,其实也就是把Redux中的数据映射到React中的props中去，然后拿数据直接可以从props中拿数据。
mapDispatchToProps：把各种dispatch也变成了props让你可以直接使用，例如添加一条数据，之前是创建一条todo,然后将todo作为参数传给方法生成一个action，接着将这个actiondispatch给reducer。现在可以直接就是this.props.addonetodo(todo),这个方法就是上面的mapDispatchToProps中的方法，这个方法才去调用actionCretor中的方法，然后生成action，派发给reducer。

下面来了解一下react Hook:
1）它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。（写项目不用类，而用纯函数）
2)组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码"钩"进来
3）钩子：
useState()
useContext()
useReducer()
useEffect()，也可以自定义钩子。
4）使用：
1.useState:
我们一般常规的写法：
import React from 'react'
export default class Like001 extends React.Component{
     state = {
          age: 0
     };

     render() {
         return (
             <div>
                 <h2>我今年{this.state.age}岁了!</h2>
                 <button onClick={()=> this.setState({age: this.state.age + 1})}>神奇的按钮</button>
             </div>
         )
     }
}
使用Hook钩子useState:
import React, {useState} from 'react'
export default ()=>{

    // 2.1 使用钩子(hook)
    const [age, setAge] = useState(0);
    const [name, setName] = useState('张三丰');

    return (
        <div>
            <h2>我叫: {name} ,今年{age}岁了!</h2>
            <button onClick={()=> {setAge(age + 1); setName('赵六')}}>神奇的按钮</button>
        </div>
    )
}
2.useEffect:
只有第一个参数。
import React, {useState, useEffect} from 'react'
export default ()=>{
    // 初始化状态
    const [count, setCount] = useState(0);

    // useEffect默认执行  componentDidMount,componentDidUpdate,
    useEffect(()=>{
        document.title = `点击了${count}次!`;
    });

    return (
        <div>
            <h2>点击了{count}次数!</h2>
            <button onClick={()=> setCount(count + 1)}>增加</button>
        </div>
    )
}
有两个参数，默认只有一个参数的时候执行的是componentDidMount和componentDidUpdate，
import React, {useState, useEffect} from 'react'
export default ()=> {
    // 初始化状态
    const [count, setCount] = useState(0);
    const [name, setName] = useState("撩课学院");
    /*
       1) 如果不加第二个参数, 默认是执行: componentDidMount  componentDidUpdate
       2) [], 默认是执行: componentDidMount
       3) [状态], 只有状态发生改变是, 才会去触发componentDidUpdate
    */
    useEffect(()=>{
        console.log('---执行了------');
        document.title = `点击了${count}次!`;
        // 相当于componentWillUnMount，在componentWillUnMount可以在return中
        return {

        }
    }, [count]);

    return (
        <div>
            <h2>点击了{count}次数!</h2>
            <p>{name}</p>
            <button onClick={()=>setCount(count + 1)}>增加</button>
            <button onClick={()=>setName("itLike.com")}>修改名字</button>
        </div>
    )
}

3.  Hook中处理副作用操作
import React, {useEffect, useState} from 'react'
import ReactDOM from 'react-dom'

const AgeAPI = {
   age: 0,
   subscribe(callBack) {
       this.intervalId = setInterval(()=>{
            console.log('定时器正在执行!');
            this.age += 1;
            callBack(this.age);
       }, 1000);
   },
   unsubscribe() {
       clearInterval(this.intervalId);
   }
};

const Like004 = ()=>{
    const [age, setAge] = useState(0);
    useEffect(()=>{
        AgeAPI.subscribe((currentAge)=>{
            setAge(currentAge);
        });
        // 处理副作用代码
        // 相当于要在componentWillUnmount
        return ()=>{
            // 清除定时器
            AgeAPI.unsubscribe();
        }
    }, []);
    return (
        <div>
            <h2>我是树妖, 今年{age}岁了!</h2>
            <button onClick={()=>ReactDOM.unmountComponentAtNode(document.getElementById('root'))}>砍树</button>
        </div>
    )
};
export default Like004;

4.Hook中使用网络请求：
import React, {useState, useEffect} from 'react'
import ajax from './../http/index'
const useAjax = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(()=>{
    (async ()=>{
      const response = await ajax('http://demo.itlike.com/web/xlmc/api/homeApi/categoriesdetail/lk001?itlike=87224866875667849947');
      console.log(response);
      // 状态赋值
      setData(response.data);
      setLoading(false);
    })()
  }, []);

  return {data, loading};
};
const Like005 = ()=>{
const {data, loading } = useAjax('http://demo.itlike.com/web/xlmc/api/homeApi/categoriesdetail/lk001?itlike=87224866875667849947');
  return (
      <div>{loading ? <div>正在拼命加载中....</div>  : data.cate[0].name}</div>
  )
};
这就是React Hook的大致用法。最后附上App.js的代码：
import React from 'react';
// 引入组件
// import Like001 from './components/Like001'
// import Like002 from './components/Like002'
// import Like003 from './components/Like003'
// import Like004 from './components/Like004'
import Like005 from './components/Like005'

function App() {
  return (
    <div>
       <Like005 />
    </div>
  );
}

export default App;






















































