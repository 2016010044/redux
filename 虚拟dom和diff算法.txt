1.虚拟dom
内部执行流程：
1) 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中; 
2) 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异;
3) 把步骤2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。

内部刨析：
Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，硬盘读取速度比较慢，我们会就在它们之间加缓存条;  
反之, 既然 DOM 运行速度慢，那么我们就在JS 和 DOM 之间加个缓存。JS只操作Virtual DOM，最后的时候再把变更的结果写入DOM。

2.diff算法：
作用：计算出Virtual DOM中真正变化的部分，并只针对该部分进行原生DOM操作，而非重新渲染整个页面。
什么是diff算法：diff算法是调和的具体实现。调和：将Virtual DOM树转换成actual DOM树的最少操作的过程。
传统的diff的时间复杂度为O(n^3)。
1)网上的理解
Diff的三种策略分析：Tree diff、Component diff、Element diff。
Web UI 中DOM节点跨层级的移动操作特别少，可以忽略不计（treediff）
拥有相同类的两个组件将会生成相似的树形结构，拥有不同类的两个组件将会生成不同的树形结构。(component diff)
对于同一层级的一组子节点，它们可以通过唯一id进行区分。(element diff)
2）自己的理解：diff就是虚拟的树构建真正的树的过程。对比出虚拟dom和正真树的差异，然后更新那个正真的树
a) 如果两棵树的根元素类型不同，React会销毁旧树，创建新树。（就是说原来那个正真的树的根是section，现在虚拟dom的根是div，虚拟dom渲染那个正真的树，就删除原来的根，用虚拟dom的根）
//旧树
<section><Liao/></section>
//新树
<div><Liao/></div>
b)  对于类型相同的React DOM 元素，React会对比两者的属性是否相同，只更新不同的属性;  当处理完这个DOM节点，React就会递归处理子节点。（就是原来正真的树的className为before，但是现在虚拟dom为current，虚拟dom渲染那个正真的树，那个真正的树的属性就变为current）
//改变前
<div className="before"/>
//改变后
<div className="current"/>

c)  遍历插入元素, 如果没有key, React将改变每一个子删除重新创建;  为了解决这个问题，React提供了一个 key 属性。当子节点带有key属性，React会通过key来匹配原始树和后来的树。（这个key是react自带的，不必太在意，只要知道，通过key来比对虚拟dom和原来的那个正真的树，然后渲染到那颗正真的树。例如：通过绑定key, React就知道带有key '1024' 的元素是新的，对于 '1025' 和 '1026' 仅仅移动位置即可。（意思就是虚拟dom有三个，原来的树只有后两个，通过key,才能确定1024插到哪儿））
	




















